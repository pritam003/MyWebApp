Parameters:
  SecurityGroupDescription:
    Description: Security Group Description (Simple parameter)
    Type: String
  SubscriptionEndPoint:
    Type: String
    Description: The endpoint that receives notifications.
  SubscriptionProtocol:
    Type: String
    Description: The subscription protocol
    AllowedValues:
      - email
      - sms
    Default: email
  ImageId:
    Description: Image ID for base EC2 instance.
    Type: 'AWS::EC2::Image::Id'
    Default: ami-0eeb03e72075b9bcc
  EnvironmentName:
    Description: Environment Name
    Type: String
    AllowedValues:
      - development
      - productionLowLoad
      - productionHighLoad
    ConstraintDescription: must be development or production
  KeyName:
    Description: >-
      Name of an existing EC2 KeyPair to enable SSH access to the instances.
      Linked to AWS Parameter
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SubnetIp:
    Description: Comma-delimited list of three CIDR blocks
    Type: CommaDelimitedList
    Default: '10.0.48.0/24, 10.0.112.0/24, 10.0.176.0/24'
Mappings:
  EnvironmentToInstanceType:
    development:
      instanceType: t2.micro
    productionLowLoad:
      instanceType: m5a.8xlarge
    productionHighLoad:
      instanceType: r6g.large
Resources:
  MyEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !FindInMap 
        - EnvironmentToInstanceType
        - !Ref EnvironmentName
        - instanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sdf
          Ebs:
            VolumeSize: 1
            VolumeType: gp2
      KeyName: !Ref KeyName
      ImageId: !Ref ImageId
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !GetAtt PrivateSecurityGroup.GroupId
        
  MyEC2Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !FindInMap 
        - EnvironmentToInstanceType
        - !Ref EnvironmentName
        - instanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sdf
          Ebs:
            VolumeSize: 1
            VolumeType: gp2
      KeyName: !Ref KeyName
      ImageId: !Ref ImageId
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !GetAtt PrivateSecurityGroup.GroupId
        
  BasEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      InstanceId: !Ref BASTIONHOST
      Domain: vpc
  BASTIONHOST:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      ImageId: !Ref ImageId
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !GetAtt PublicSecurityGroup1.GroupId
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: myVPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: myVPC Internet Gateway
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PrivateSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref SecurityGroupDescription
      SecurityGroupIngress:
            - 
              SourceSecurityGroupId: !Ref ALBSecurityGroup
              FromPort: 80
              IpProtocol: "tcp"
              ToPort: 80
            - 
              SourceSecurityGroupId: !Ref ALBSecurityGroup
              FromPort: 443
              IpProtocol: "tcp"
              ToPort: 443
      VpcId: !Ref VPC
  PublicSecurityGroup1:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref SecurityGroupDescription
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
      VpcId: !Ref VPC
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select 
        - 0
        - !Ref SubnetIp
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ] # AZ 1
      CidrBlock: !Select 
        - 1
        - !Ref SubnetIp
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ] # AZ 2
      CidrBlock: !Select 
        - 2
        - !Ref SubnetIp
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table
  PrivateSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable
      
#ALB creation 
    
  ALBSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
          GroupDescription: "security group for ALB"
          GroupName: "ALB-SG"
          VpcId: !Ref VPC
          SecurityGroupIngress: 
            - 
              CidrIp: "0.0.0.0/0"
              FromPort: 80
              IpProtocol: "tcp"
              ToPort: 80
            - 
              CidrIp: "0.0.0.0/0"
              FromPort: 443
              IpProtocol: "tcp"
              ToPort: 443
  
  ApplicationLoadBalancer:
      Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
      Properties:
          Name: "test-Application-Load-Balancer"
          Scheme: "internet-facing"
          Type: "application"
          Subnets: 
            - !Ref PublicSubnet
            - !Ref PublicSubnet1
          SecurityGroups: 
            - !Ref ALBSecurityGroup
          IpAddressType: "ipv4"
          LoadBalancerAttributes: 
            - 
              Key: "access_logs.s3.enabled"
              Value: "false"
            - 
              Key: "idle_timeout.timeout_seconds"
              Value: "60"
            - 
              Key: "deletion_protection.enabled"
              Value: "false"
            - 
              Key: "routing.http2.enabled"
              Value: "true"
            - 
              Key: "routing.http.drop_invalid_header_fields.enabled"
              Value: "false"
  
  
  HTTPListener:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties:
          LoadBalancerArn: !Ref ApplicationLoadBalancer
          Port: 80
          Protocol: "HTTP"
          
  Test1TargetGroup:
      Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
      Properties:
          HealthCheckIntervalSeconds: 30
          HealthCheckPath: "/"
          Port: 80
          Protocol: "HTTP"
          HealthCheckPort: "traffic-port"
          HealthCheckProtocol: "HTTP"
          HealthCheckTimeoutSeconds: 5
          UnhealthyThresholdCount: 2
          TargetType: "instance"
          Targets:
           - Id:
               Ref: MyEC2Instance
          Matcher: 
              HttpCode: "200"
          HealthyThresholdCount: 5
          VpcId: !Ref VPC
          Name: "target-group-1"
          HealthCheckEnabled: true
          TargetGroupAttributes: 
            - 
              Key: "stickiness.enabled"
              Value: "false"
            - 
              Key: "deregistration_delay.timeout_seconds"
              Value: "300"
            - 
              Key: "stickiness.type"
              Value: "lb_cookie"
            - 
              Key: "stickiness.lb_cookie.duration_seconds"
              Value: "86400"
            - 
              Key: "slow_start.duration_seconds"
              Value: "0"
            - 
              Key: "load_balancing.algorithm.type"
              Value: "round_robin"
  
  Test2TargetGroup:
      Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
      Properties:
          HealthCheckIntervalSeconds: 30
          HealthCheckPath: "/"
          Port: 80
          Protocol: "HTTP"
          HealthCheckPort: "traffic-port"
          HealthCheckProtocol: "HTTP"
          HealthCheckTimeoutSeconds: 5
          UnhealthyThresholdCount: 2
          TargetType: "instance"
          Targets:
           - Id:
               Ref: MyEC2Instance1
          Matcher: 
              HttpCode: "200"
          HealthyThresholdCount: 5
          VpcId: !Ref VPC
          Name: "target-group-2"
          HealthCheckEnabled: true
          TargetGroupAttributes: 
            - 
              Key: "stickiness.enabled"
              Value: "false"
            - 
              Key: "deregistration_delay.timeout_seconds"
              Value: "300"
            - 
              Key: "stickiness.type"
              Value: "lb_cookie"
            - 
              Key: "stickiness.lb_cookie.duration_seconds"
              Value: "86400"
            - 
              Key: "slow_start.duration_seconds"
              Value: "0"
            - 
              Key: "load_balancing.algorithm.type"
              Value: "round_robin"
             
  TestListenerRule1:
      Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
      Properties:
          Priority: "1"
          ListenerArn: !Ref HTTPListener
          Actions: 
            - 
              Type: "forward"
              TargetGroupArn: !Ref Test1TargetGroup

  TestListenerRule2:
      Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
      Properties:
          Priority: "2"
          ListenerArn: !Ref HTTPListener
          Actions: 
            - 
              Type: "forward"
              TargetGroupArn: !Ref Test2TargetGroup
             
  weblogbucket:
      DeletionPolicy: Retain
      Type: 'AWS::S3::Bucket'
      Description: Creating Amazon S3 bucket for Logs
      Properties:
        BucketName: my-log-bucket-for-web-app-first
        AccessControl: Private
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        VersioningConfiguration:
          Status: Enabled
          
  SNSTopic:
    Type: 'AWS::SNS::Topic'
  SNSSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint:
        Ref: SubscriptionEndPoint
      Protocol:
        Ref: SubscriptionProtocol
      TopicArn:
        Ref: SNSTopic
    
    
  CPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: CPU alarm for my instance
      AlarmActions:
      - Ref: SNSTopic
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '3'
      Threshold: '70'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: InstanceId
        Value:
         Ref: MyEC2Instance1
         Ref: MyEC2Instance